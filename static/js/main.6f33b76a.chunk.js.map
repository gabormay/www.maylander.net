{"version":3,"sources":["NotFound404.js","MainPage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["NotFound404","react_default","a","createElement","Jumbotron","MainPage","className","Component","Routes","Switch","Route","path","exact","component","App","Container","Row","Col","sm","href","target","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAIAA,EAAA,WAAe,OACXC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,0BCUGE,0LAVX,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACdL,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACKH,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aAAd,wCALWC,cCEvBC,EAAA,WAAe,OACbP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWR,IACjCJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOG,UAAWb,MCuBPc,mLAzBX,OACEb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAEbL,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACK,EAAD,OAEFP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAWT,UAAU,QACnBL,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKC,GAAG,KACNjB,EAAAC,EAAAC,cAAA,yEAEFF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKC,GAAG,KACNjB,EAAAC,EAAAC,cAAA,OAAMG,UAAU,eAEdL,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,IAAIC,OAAO,UAAnB,kBAA2CnB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,sCAjBhEC,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mFCRNC,IAASC,OACL1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACI3B,EAAAC,EAAAC,cAAC0B,EAAD,OAEJC,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6f33b76a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Jumbotron } from 'reactstrap';\n\nexport default () =>\n    <div>\n        <Jumbotron>\n            <h1>Not Found</h1>\n        </Jumbotron>\n    </div>;\n","import React, { Component } from 'react';\nimport './MainPage.css';\n\nimport { Jumbotron } from 'reactstrap';\n\nclass MainPage extends Component {\n  render() {\n    return (\n      <div className=\"MainPage\">\n       <Jumbotron>\n            <h1 className=\"display-3\">maylander.net - coming soon</h1>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\n\nimport NotFound404 from './NotFound404'\nimport MainPage from './MainPage'\n\nexport default () =>\n  <Switch>\n    <Route path=\"/\" exact component={MainPage} />\n    <Route component={NotFound404} />\n  </Switch>;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Container, Row, Col } from 'reactstrap';\nimport Routes from './Routes'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Navbar comes here */}\n        <Container>\n          <Routes />\n        </Container>\n        <hr/>\n        <Container className=\"mb-3\" >\n          <Row>\n            <Col sm=\"6\">\n              <small>maylander.net - The homepage of the Mayl√§nder Family</small>\n            </Col>\n            <Col sm=\"6\">\n              <div  className=\"float-right\">\n                {/* eslint-disable-next-line */}\n                <small><a href=\"#\" target=\"_blank\">link to source <span className=\"oi oi-external-link\"></span></a></small>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css'\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}